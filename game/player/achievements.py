from dataclasses import dataclass
from datetime import datetime, timezone
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from bot.database.models.user import User
from game.player.skills import SkillType


class AchievementCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""

    SKILLS = "skills"  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤
    CASES = "cases"  # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    SPECIAL = "special"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    SECRET = "secret"  # –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    COLLECTION = "collection"  # –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è


class AchievementRarity(Enum):
    """–†–µ–¥–∫–æ—Å—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""

    COMMON = "common"  # –û–±—ã—á–Ω—ã–µ
    UNCOMMON = "uncommon"  # –ù–µ–æ–±—ã—á–Ω—ã–µ
    RARE = "rare"  # –†–µ–¥–∫–∏–µ
    EPIC = "epic"  # –≠–ø–∏—á–µ—Å–∫–∏–µ
    LEGENDARY = "legendary"  # –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ


@dataclass
class AchievementReward:
    """–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""

    experience: int = 0
    skill_bonuses: Optional[Dict[str, float]] = None  # –ë–æ–Ω—É—Å—ã –∫ –Ω–∞–≤—ã–∫–∞–º
    special_abilities: Optional[List[str]] = None  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    items: Optional[List[str]] = None  # –ü—Ä–µ–¥–º–µ—Ç—ã
    money: int = 0  # –î–µ–Ω—å–≥–∏
    reputation: int = 0  # –†–µ–ø—É—Ç–∞—Ü–∏—è


@dataclass
class AchievementProgress:
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""

    current: int = 0
    required: int = 0
    stages: Optional[List[int]] = None
    completed_stages: Optional[List[int]] = None


@dataclass
class Achievement:
    """–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"""

    id: str
    title: str
    description: str
    icon: str
    reward: Dict[str, int]  # —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    hidden: bool = False
    category: str = "general"
    requirements: Dict[str, Any] = None
    unlocked_at: Optional[datetime] = None


class AchievementSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"""

    def __init__(self):
        self.achievements: Dict[str, Achievement] = {}
        self.player_achievements: Dict[str, Dict] = {}
        self._init_achievements()

    def _init_achievements(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –Ω–∞–≤—ã–∫–∏
        self.achievements["skill_master"] = Achievement(
            id="skill_master",
            title="–ú–∞—Å—Ç–µ—Ä –¥–µ—Ç–µ–∫—Ç–∏–≤",
            description="–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –ª—é–±–æ–º –Ω–∞–≤—ã–∫–µ",
            icon="üí´",
            reward={
                "experience": 1000,
                "skill_bonuses": {"detective": 0.2},
                "special_abilities": ["expert_analysis"],
            },
            category="skills",
            requirements={"skill_level": 100},
        )

        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        self.achievements["case_solver"] = Achievement(
            id="case_solver",
            title="–û–ø—ã—Ç–Ω—ã–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            description="–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ 10 —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
            icon="üèÜ",
            reward={"experience": 500, "money": 1000, "reputation": 50},
            category="cases",
            requirements={"completed_cases": 10},
        )

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.achievements["perfect_solve"] = Achievement(
            id="perfect_solve",
            title="–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
            description="–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–æ–∫",
            icon="‚ú®",
            reward={
                "experience": 2000,
                "money": 5000,
                "reputation": 100,
                "special_abilities": ["perfect_analysis"],
            },
            category="special",
            requirements={"perfect_case": True},
        )

        # –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.achievements["hidden_master"] = Achievement(
            id="hidden_master",
            title="–ú–∞—Å—Ç–µ—Ä —Ç–∞–π–Ω",
            description="???",  # –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            icon="üåü‚ú®",
            reward={
                "experience": 5000,
                "money": 10000,
                "reputation": 200,
                "special_abilities": ["hidden_insight"],
            },
            category="secret",
            requirements={"hidden_conditions": True},
        )

    def _check_skill_level(self, required_level: int, player_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –Ω–∞–≤—ã–∫–∞"""
        return player_data.get("skills", {}).get("detective", 0) >= required_level

    def _check_completed_cases(self, required_cases: int, player_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–ª"""
        return player_data.get("completed_cases", 0) >= required_cases

    def _check_perfect_case(self, player_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–¥–µ–∞–ª—å–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç–æ–≥–æ –¥–µ–ª–∞"""
        return player_data.get("perfect_case", False)

    def check_achievement(self, achievement_id: str, player_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement = self.achievements.get(achievement_id)
        if not achievement:
            return False

        if not achievement.requirements:
            return True

        requirement_checkers = {
            "skill_level": self._check_skill_level,
            "completed_cases": self._check_completed_cases,
            "perfect_case": lambda _, data: self._check_perfect_case(data),
        }

        for key, value in achievement.requirements.items():
            checker = requirement_checkers.get(key)
            if not checker:
                continue

            if not checker(value, player_data):
                return False

        return True

    def update_progress(self, achievement_id: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement = self.achievements.get(achievement_id)
        if not achievement:
            return False

        player_achievement = self.player_achievements.get(achievement_id, {})
        current_progress = player_achievement.get("progress", 0)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if achievement.stages:
            for stage in achievement.stages:
                if current_progress < stage <= achievement.current:
                    self._unlock_stage(achievement_id, stage)
        else:
            achievement.current += 1

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if achievement.current >= achievement.required:
            return self.complete_achievement(achievement_id)

        return False

    def complete_achievement(self, achievement_id: str) -> bool:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement = self.achievements.get(achievement_id)
        if not achievement:
            return False

        if achievement_id in self.player_achievements:
            return False

        # –û—Ç–º–µ—Ç–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ
        self.player_achievements[achievement_id] = {
            "completed": True,
            "completion_date": datetime.now(),
            "progress": achievement.current,
        }

        return True

    def _unlock_stage(self, achievement_id: str, stage: int):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç—Ç–∞–ø–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement = self.achievements.get(achievement_id)
        if not achievement:
            return

        if not achievement.completed_stages:
            achievement.completed_stages = []

        if stage not in achievement.completed_stages:
            achievement.completed_stages.append(stage)

    def get_achievement_message(self, achievement_id: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏"""
        achievement = self.achievements.get(achievement_id)
        if not achievement:
            return ""

        rewards_text = []
        for reward_type, amount in achievement.reward.items():
            if reward_type == "experience":
                rewards_text.append(f"‚≠ê {amount} –æ–ø—ã—Ç–∞")
            elif reward_type == "energy":
                rewards_text.append(f"üí™ {amount} —ç–Ω–µ—Ä–≥–∏–∏")
            elif reward_type == "money":
                rewards_text.append(f"üí∞ {amount} –º–æ–Ω–µ—Ç")
            elif reward_type == "skill_points":
                rewards_text.append(f"üéØ {amount} –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–æ–≤")

        message = (
            f"üèÜ *–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!*\n\n"
            f"{achievement.icon} *{achievement.title}*\n"
            f"{achievement.description}\n\n"
            f"*–ù–∞–≥—Ä–∞–¥—ã:*\n"
            f"{' | '.join(rewards_text)}"
        )
        return message

    def get_player_achievements(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞"""
        return {
            "completed": [
                achievement_id
                for achievement_id, data in self.player_achievements.items()
                if data.get("completed")
            ],
            "in_progress": [
                achievement_id
                for achievement_id, data in self.player_achievements.items()
                if not data.get("completed")
            ],
            "available": [
                achievement_id
                for achievement_id, achievement in self.achievements.items()
                if achievement_id not in self.player_achievements
            ],
        }

    def get_achievement_progress(self, achievement_id: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        achievement = self.achievements.get(achievement_id)
        if not achievement:
            return {}

        player_achievement = self.player_achievements.get(achievement_id, {})
        return {
            "current": achievement.current,
            "required": achievement.required,
            "stages": achievement.stages,
            "completed_stages": achievement.completed_stages,
            "is_completed": player_achievement.get("completed", False),
        }


def format_achievement_message(achievement: Achievement) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.

    Args:
        achievement: –û–±—ä–µ–∫—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    rewards_text = []
    for reward_type, amount in achievement.reward.items():
        if reward_type == "experience":
            rewards_text.append(f"‚≠ê {amount} –æ–ø—ã—Ç–∞")
        elif reward_type == "energy":
            rewards_text.append(f"üí™ {amount} —ç–Ω–µ—Ä–≥–∏–∏")
        elif reward_type == "money":
            rewards_text.append(f"üí∞ {amount} –º–æ–Ω–µ—Ç")
        elif reward_type == "skill_points":
            rewards_text.append(f"üéØ {amount} –æ—á–∫–æ–≤ –Ω–∞–≤—ã–∫–æ–≤")

    message = (
        f"üèÜ *–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!*\n\n"
        f"{achievement.icon} *{achievement.title}*\n"
        f"{achievement.description}\n\n"
        f"*–ù–∞–≥—Ä–∞–¥—ã:*\n"
        f"{' | '.join(rewards_text)}"
    )
    return message


# –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
ACHIEVEMENTS = {
    "case_solving": {
        "first_case": Achievement(
            id="first_case",
            title="–ü–µ—Ä–≤–æ–µ –¥–µ–ª–æ",
            description="–†–∞—Å–∫—Ä–æ–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –¥–µ–ª–æ",
            icon="üîç",
            reward={"experience": 100, "money": 500},
            category="case_solving",
        ),
        "perfect_solve": Achievement(
            id="perfect_solve",
            title="–ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
            description="–†–∞—Å–∫—Ä–æ–π—Ç–µ –¥–µ–ª–æ –±–µ–∑ –æ—à–∏–±–æ–∫",
            icon="‚ú®",
            reward={"experience": 200, "money": 1000, "skill_points": 2},
            category="case_solving",
        ),
        "master_detective": Achievement(
            id="master_detective",
            title="–ú–∞—Å—Ç–µ—Ä-–¥–µ—Ç–µ–∫—Ç–∏–≤",
            description="–†–∞—Å–∫—Ä–æ–π—Ç–µ 10 –¥–µ–ª",
            icon="üëë",
            reward={"experience": 1000, "money": 5000, "skill_points": 5},
            category="case_solving",
        ),
        "speed_demon": Achievement(
            id="speed_demon",
            title="–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
            description="–†–∞—Å–∫—Ä–æ–π—Ç–µ –¥–µ–ª–æ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 30 –º–∏–Ω—É—Ç",
            icon="‚ö°",
            reward={"experience": 300, "money": 1500, "energy": 50},
            category="case_solving",
        ),
    },
    "skills": {
        "forensic_expert": Achievement(
            id="forensic_expert",
            title="–ö—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç-—ç–∫—Å–ø–µ—Ä—Ç",
            description="–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è –≤ –Ω–∞–≤—ã–∫–µ –∫—Ä–∏–º–∏–Ω–∞–ª–∏—Å—Ç–∏–∫–∏",
            icon="üî¨",
            reward={"experience": 500, "money": 2000, "skill_points": 3},
            category="skills",
        ),
        "psychology_master": Achievement(
            id="psychology_master",
            title="–ú–∞—Å—Ç–µ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏",
            description="–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è –≤ –Ω–∞–≤—ã–∫–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏",
            icon="üß†",
            reward={"experience": 500, "money": 2000, "skill_points": 3},
            category="skills",
        ),
        "detective_pro": Achievement(
            id="detective_pro",
            title="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤",
            description="–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è –≤ –Ω–∞–≤—ã–∫–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞",
            icon="üïµÔ∏è",
            reward={"experience": 500, "money": 2000, "skill_points": 3},
            category="skills",
        ),
    },
    "exploration": {
        "location_master": Achievement(
            id="location_master",
            title="–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å",
            description="–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –≤ –¥–µ–ª–µ",
            icon="üó∫Ô∏è",
            reward={"experience": 200, "money": 1000},
            category="exploration",
        ),
        "evidence_collector": Achievement(
            id="evidence_collector",
            title="–°–æ–±–∏—Ä–∞—Ç–µ–ª—å —É–ª–∏–∫",
            description="–°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ —É–ª–∏–∫–∏ –≤ –¥–µ–ª–µ",
            icon="üì¶",
            reward={"experience": 200, "money": 1000},
            category="exploration",
        ),
        "interrogation_pro": Achievement(
            id="interrogation_pro",
            title="–ú–∞—Å—Ç–µ—Ä –¥–æ–ø—Ä–æ—Å–∞",
            description="–î–æ–ø—Ä–æ—Å–∏—Ç–µ –≤—Å–µ—Ö –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö",
            icon="üí¨",
            reward={"experience": 200, "money": 1000},
            category="exploration",
        ),
    },
    "special": {
        "night_owl": Achievement(
            id="night_owl",
            title="–ù–æ—á–Ω–∞—è —Å–æ–≤–∞",
            description="–†–∞—Å–∫—Ä–æ–π—Ç–µ –¥–µ–ª–æ –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
            icon="ü¶â",
            reward={"experience": 300, "money": 1500},
            category="special",
            hidden=True,
        ),
        "lucky_detective": Achievement(
            id="lucky_detective",
            title="–°—á–∞—Å—Ç–ª–∏–≤—á–∏–∫",
            description="–ù–∞–π–¥–∏—Ç–µ —É–ª–∏–∫—É —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞",
            icon="üçÄ",
            reward={"experience": 200, "money": 1000},
            category="special",
            hidden=True,
        ),
        "social_butterfly": Achievement(
            id="social_butterfly",
            title="–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞",
            description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ö–æ—Ä–æ—à–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–º–∏",
            icon="ü¶ã",
            reward={"experience": 300, "money": 1500},
            category="special",
            hidden=True,
        ),
    },
}


def _check_case_achievements(user: Any, context: Dict[str, Any]) -> List[Achievement]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ —Ä–µ—à–µ–Ω–∏–µ –¥–µ–ª"""
    unlocked = []
    cases_solved = user.stats.cases_solved

    if cases_solved == 1:
        unlocked.append(ACHIEVEMENTS["case_solving"]["first_case"])
    if cases_solved >= 10:
        unlocked.append(ACHIEVEMENTS["case_solving"]["master_detective"])
    if context.get("perfect_solve", False):
        unlocked.append(ACHIEVEMENTS["case_solving"]["perfect_solve"])
    if context.get("completion_time", 0) < 30:
        unlocked.append(ACHIEVEMENTS["case_solving"]["speed_demon"])

    return unlocked


def _check_skill_achievements(context: Dict[str, Any]) -> List[Achievement]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –Ω–∞–≤—ã–∫–∏"""
    unlocked = []
    skill_name = context.get("skill_name")
    new_level = context.get("new_level")

    if new_level >= 10:
        if skill_name == "forensic":
            unlocked.append(ACHIEVEMENTS["skills"]["forensic_expert"])
        elif skill_name == "psychology":
            unlocked.append(ACHIEVEMENTS["skills"]["psychology_master"])
        elif skill_name == "detective":
            unlocked.append(ACHIEVEMENTS["skills"]["detective_pro"])

    return unlocked


def _check_exploration_achievements(
    action: str, context: Dict[str, Any]
) -> List[Achievement]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"""
    unlocked = []

    if action == "location_explored" and context.get("all_locations_explored", False):
        unlocked.append(ACHIEVEMENTS["exploration"]["location_master"])
    elif action == "suspect_interviewed" and context.get(
        "all_suspects_interviewed", False
    ):
        unlocked.append(ACHIEVEMENTS["exploration"]["interrogation_pro"])

    return unlocked


def _check_special_achievements(
    action: str, context: Dict[str, Any]
) -> List[Achievement]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    unlocked = []

    if action == "case_started" and context.get("time_of_day", "").lower() == "night":
        unlocked.append(ACHIEVEMENTS["special"]["night_owl"])
    elif action == "evidence_found":
        if context.get("found_on_first_try", False):
            unlocked.append(ACHIEVEMENTS["special"]["lucky_detective"])
        if context.get("all_evidence_collected", False):
            unlocked.append(ACHIEVEMENTS["exploration"]["evidence_collector"])
    elif action == "case_completed" and context.get(
        "good_relationships_with_all", False
    ):
        unlocked.append(ACHIEVEMENTS["special"]["social_butterfly"])

    return unlocked


def check_achievements(
    user: Any, action: str, context: Dict[str, Any]
) -> List[Achievement]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∏ –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è

    Returns:
        List[Achievement]: –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    """
    unlocked_achievements = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if action == "case_completed":
        unlocked_achievements.extend(_check_case_achievements(user, context))
    elif action == "skill_level_up":
        unlocked_achievements.extend(_check_skill_achievements(context))
    elif action == "evidence_found":
        unlocked_achievements.extend(_check_special_achievements(action, context))
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        unlocked_achievements.extend(_check_exploration_achievements(action, context))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        unlocked_achievements.extend(_check_special_achievements(action, context))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    for achievement in unlocked_achievements:
        if not achievement.unlocked_at:
            achievement.unlocked_at = datetime.now(timezone.utc)

    return unlocked_achievements
