"""–§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""

from datetime import datetime
from typing import Any, Dict, List


def format_message(text: str, **kwargs) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–º–µ—Ç–∫–æ–π Markdown"""
    return text.format(**kwargs)


def format_profile(user: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –¥–µ—Ç–µ–∫—Ç–∏–≤–∞*\n\n"
        f"üÜî ID: `{user['telegram_id']}`\n"
        f"üë§ –ò–º—è: {user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {user['stats']['level']}\n"
        f"‚≠ê –û–ø—ã—Ç: {user['stats']['experience']}\n"
        f"üí™ –≠–Ω–µ—Ä–≥–∏—è: {user['stats']['energy']}/{user['stats']['max_energy']}\n"
        f"üîç –†–µ—à–µ–Ω–Ω—ã—Ö –¥–µ–ª: {user['stats']['cases_solved']}\n"
        f"‚ú® –ò–¥–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ª: {user['stats'].get('perfect_cases', 0)}\n\n"
        f"üéØ –ù–∞–≤—ã–∫–∏:\n"
        + "\n".join(
            [f"‚Ä¢ {name}: {data['level']}" for name, data in user["skills"].items()]
        )
    )


def format_case_description(case: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞"""
    return (
        f"üìÅ *{case['title']}*\n"
        f"üìù {case['description']}\n"
        f"üèÜ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {'‚≠ê' * case['difficulty']}\n"
        f"üìÖ –ù–∞—á–∞—Ç–æ: {case['start_date'].strftime('%d.%m.%Y')}\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {case['progress']}%\n\n"
    )


def format_evidence_analysis(evidence: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —É–ª–∏–∫–∏"""
    return (
        f"üîç *–ê–Ω–∞–ª–∏–∑ —É–ª–∏–∫–∏:* {evidence['name']}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {evidence['description']}\n"
        f"üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n{evidence['analysis']}\n"
        f"üìä –ó–Ω–∞—á–∏–º–æ—Å—Ç—å: {evidence['importance']}/10\n\n"
    )


def format_news(news: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç—å"""
    return (
        f"üì∞ *{news['title']}*\n\n"
        f"{news['content']}\n\n"
        f"üìÖ {news['date'].strftime('%d.%m.%Y %H:%M')}\n"
    )


def format_investigation_response(response: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.

    Args:
        response: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    message = []

    # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    if "description" in response:
        message.append(f"üîç {response['description']}\n")

    # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª–∏–∫–∏
    if "evidence" in response and response["evidence"]:
        message.append("\nüì¶ *–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª–∏–∫–∏:*")
        for evidence in response["evidence"]:
            message.append(f"‚Ä¢ {evidence['name']}: {evidence['description']}")

    # –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π
    if "witnesses" in response and response["witnesses"]:
        message.append("\nüë• *–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π:*")
        for witness in response["witnesses"]:
            message.append(f"‚Ä¢ {witness['name']}: {witness['statement']}")

    # –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ
    if "suspects" in response and response["suspects"]:
        message.append("\nüé≠ *–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ:*")
        for suspect in response["suspects"]:
            message.append(f"‚Ä¢ {suspect['name']}: {suspect['description']}")

    # –ü–æ–¥—Å–∫–∞–∑–∫–∏
    if "hints" in response and response["hints"]:
        message.append("\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏:*")
        for hint in response["hints"]:
            message.append(f"‚Ä¢ {hint}")

    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if "available_actions" in response and response["available_actions"]:
        message.append("\nüéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*")
        for action in response["available_actions"]:
            message.append(f"‚Ä¢ {action}")

    return "\n".join(message)
