import logging
from dataclasses import dataclass
from enum import Enum
from typing import Dict, List, Optional, Union

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup

from game.player.skills import SkillType

logger = logging.getLogger(__name__)


class ActionType(Enum):
    """–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏"""

    EXAMINE = "examine"  # –û—Å–º–æ—Ç—Ä –º–µ—Å—Ç–∞
    INTERROGATE = "interrogate"  # –î–æ–ø—Ä–æ—Å
    ANALYZE = "analyze"  # –ê–Ω–∞–ª–∏–∑ —É–ª–∏–∫
    MOVE = "move"  # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    USE_SKILL = "use_skill"  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–∞
    MAKE_DEDUCTION = "make_deduction"  # –í—ã–¥–≤–∏–∂–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
    FINAL_DECISION = "final_decision"  # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ


@dataclass
class ButtonData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏"""

    action: ActionType
    target_id: str
    additional_data: Optional[Dict] = None


class InvestigationKeyboards:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"""

    @staticmethod
    def create_main_menu() -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
        keyboard = [
            [
                InlineKeyboardButton(
                    "üîç –û—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ—Å—Ç–æ",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.EXAMINE, target_id="location"
                        ).__dict__
                    ),
                ),
                InlineKeyboardButton(
                    "üë• –î–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≤–∏–¥–µ—Ç–µ–ª—è",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.INTERROGATE, target_id="witnesses"
                        ).__dict__
                    ),
                ),
            ],
            [
                InlineKeyboardButton(
                    "üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É–ª–∏–∫–∏",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.ANALYZE, target_id="evidence"
                        ).__dict__
                    ),
                ),
                InlineKeyboardButton(
                    "üß† –í—ã–¥–≤–∏–Ω—É—Ç—å –≤–µ—Ä—Å–∏—é",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.MAKE_DEDUCTION, target_id="deduction"
                        ).__dict__
                    ),
                ),
            ],
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_location_keyboard(
        locations: List[Dict], current_location: str
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏—è–º"""
        keyboard = []
        row = []

        for location in locations:
            if location["id"] != current_location:
                row.append(
                    InlineKeyboardButton(
                        text=f"üìç {location['name']}",
                        callback_data=str(
                            ButtonData(
                                action=ActionType.MOVE, target_id=location["id"]
                            ).__dict__
                        ),
                    )
                )
                if len(row) == 2:
                    keyboard.append(row)
                    row = []

        if row:
            keyboard.append(row)

        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=str(
                        ButtonData(action=ActionType.MOVE, target_id="back").__dict__
                    ),
                )
            ]
        )

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_examination_keyboard(
        examineable_objects: List[Dict], player_skills: Dict[SkillType, int]
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤"""
        keyboard = []
        row = []

        for obj in examineable_objects:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞
            if obj.get("required_skill"):
                skill_type = SkillType(obj["required_skill"])
                if player_skills.get(skill_type, 0) < obj.get("required_level", 1):
                    continue

            row.append(
                InlineKeyboardButton(
                    text=f"üîç {obj['name']}",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.EXAMINE,
                            target_id=obj["id"],
                            additional_data={"object_type": obj["type"]},
                        ).__dict__
                    ),
                )
            )
            if len(row) == 2:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=str(
                        ButtonData(action=ActionType.EXAMINE, target_id="back").__dict__
                    ),
                )
            ]
        )

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_interrogation_keyboard(
        witnesses: List[Dict], player_skills: Dict[SkillType, int]
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–ø—Ä–æ—Å–∞ —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π"""
        keyboard = []
        row = []

        for witness in witnesses:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–≤–∏–¥–µ—Ç–µ–ª—å –¥–ª—è –¥–æ–ø—Ä–æ—Å–∞
            if witness.get("required_skill"):
                skill_type = SkillType(witness["required_skill"])
                if player_skills.get(skill_type, 0) < witness.get("required_level", 1):
                    continue

            row.append(
                InlineKeyboardButton(
                    text=f"üë§ {witness['name']}",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.INTERROGATE,
                            target_id=witness["id"],
                            additional_data={"witness_type": witness["type"]},
                        ).__dict__
                    ),
                )
            )
            if len(row) == 2:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.INTERROGATE, target_id="back"
                        ).__dict__
                    ),
                )
            ]
        )

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_evidence_analysis_keyboard(
        evidence: List[Dict], player_skills: Dict[SkillType, int]
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É–ª–∏–∫"""
        keyboard = []
        row = []

        for item in evidence:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if item.get("required_skill"):
                skill_type = SkillType(item["required_skill"])
                if player_skills.get(skill_type, 0) < item.get("required_level", 1):
                    continue

            row.append(
                InlineKeyboardButton(
                    text=f"üî¨ {item['name']}",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.ANALYZE,
                            target_id=item["id"],
                            additional_data={"evidence_type": item["type"]},
                        ).__dict__
                    ),
                )
            )
            if len(row) == 2:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=str(
                        ButtonData(action=ActionType.ANALYZE, target_id="back").__dict__
                    ),
                )
            ]
        )

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_skill_usage_keyboard(
        available_skills: Dict[SkillType, int], target_id: str, target_type: str
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤"""
        keyboard = []
        row = []

        for skill_type, level in available_skills.items():
            row.append(
                InlineKeyboardButton(
                    text=f"üí° {skill_type.name} (–£—Ä. {level})",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.USE_SKILL,
                            target_id=target_id,
                            additional_data={
                                "skill_type": skill_type.value,
                                "target_type": target_type,
                            },
                        ).__dict__
                    ),
                )
            )
            if len(row) == 2:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.USE_SKILL, target_id="back"
                        ).__dict__
                    ),
                )
            ]
        )

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_deduction_keyboard(
        available_theories: List[Dict], player_skills: Dict[SkillType, int]
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–¥–≤–∏–∂–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π"""
        keyboard = []
        row = []

        for theory in available_theories:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –≤–µ—Ä—Å–∏—è –¥–ª—è –≤—ã–¥–≤–∏–∂–µ–Ω–∏—è
            if theory.get("required_skill"):
                skill_type = SkillType(theory["required_skill"])
                if player_skills.get(skill_type, 0) < theory.get("required_level", 1):
                    continue

            row.append(
                InlineKeyboardButton(
                    text=f"üß† {theory['name']}",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.MAKE_DEDUCTION,
                            target_id=theory["id"],
                            additional_data={"theory_type": theory["type"]},
                        ).__dict__
                    ),
                )
            )
            if len(row) == 2:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.MAKE_DEDUCTION, target_id="back"
                        ).__dict__
                    ),
                )
            ]
        )

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_final_decision_keyboard(
        available_decisions: List[Dict], player_skills: Dict[SkillType, int]
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
        keyboard = []
        row = []

        for decision in available_decisions:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ —Ä–µ—à–µ–Ω–∏–µ
            if decision.get("required_skill"):
                skill_type = SkillType(decision["required_skill"])
                if player_skills.get(skill_type, 0) < decision.get("required_level", 1):
                    continue

            row.append(
                InlineKeyboardButton(
                    text=f"‚öñÔ∏è {decision['name']}",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.FINAL_DECISION,
                            target_id=decision["id"],
                            additional_data={"decision_type": decision["type"]},
                        ).__dict__
                    ),
                )
            )
            if len(row) == 2:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.FINAL_DECISION, target_id="back"
                        ).__dict__
                    ),
                )
            ]
        )

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_hints_keyboard(
        available_hints: List[Dict], player_skills: Dict[SkillType, int]
    ) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
        keyboard = []
        row = []

        for hint in available_hints:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞
            if hint.get("required_skill"):
                skill_type = SkillType(hint["required_skill"])
                if player_skills.get(skill_type, 0) < hint.get("required_level", 1):
                    continue

            row.append(
                InlineKeyboardButton(
                    text=f"üí° {hint['name']}",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.USE_SKILL,
                            target_id=hint["id"],
                            additional_data={"hint_type": hint["type"]},
                        ).__dict__
                    ),
                )
            )
            if len(row) == 2:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        keyboard.append(
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥",
                    callback_data=str(
                        ButtonData(
                            action=ActionType.USE_SKILL, target_id="back"
                        ).__dict__
                    ),
                )
            ]
        )

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def parse_callback_data(callback_data: str) -> ButtonData:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data"""
        try:
            data = eval(callback_data)
            return ButtonData(**data)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ callback_data: {e}")
            return ButtonData(action=ActionType.MOVE, target_id="error")
