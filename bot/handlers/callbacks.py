"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""

import logging
from typing import Any, Dict, Optional

from telegram import Update
from telegram.ext import ContextTypes

from bot.database.repositories.case_repository import CaseRepository
from bot.database.repositories.investigation_repository import InvestigationRepository
from bot.database.repositories.user_repository import UserRepository
from bot.keyboards.investigation import InvestigationKeyboards
from bot.keyboards.profile_keyboard import create_profile_keyboard
from bot.utils.formatters import format_case_description, format_investigation_response

logger = logging.getLogger(__name__)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()

        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        data = query.data.split("_")
        action = data[0]
        target_id = data[1] if len(data) > 1 else None

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        if action == "case":
            await handle_case_callback(query, target_id)
        elif action == "evidence":
            await handle_evidence_callback(query, target_id)
        elif action == "suspect":
            await handle_suspect_callback(query, target_id)
        elif action == "location":
            await handle_location_callback(query, target_id)
        elif action == "skill":
            await handle_skill_callback(query, target_id)
        elif action == "achievement":
            await handle_achievement_callback(query, target_id)
        else:
            await query.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await update.callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_case_callback(query: Any, case_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–ª–∞"""
    try:
        case = await CaseRepository.get_case(case_id)
        if not case:
            await query.message.edit_text("‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        case_text = format_case_description(case)
        await query.message.edit_text(
            case_text,
            reply_markup=await InvestigationKeyboards.create_location_keyboard(
                case.locations
            ),
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–µ–ª–∞: {e}")
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–ª–æ")


async def handle_evidence_callback(query: Any, evidence_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–ª–∏–∫–∏"""
    try:
        evidence = await InvestigationRepository.get_evidence(evidence_id)
        if not evidence:
            await query.message.edit_text("‚ùå –£–ª–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        evidence_text = (
            f"üîç *–£–ª–∏–∫–∞:* {evidence.name}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {evidence.description}\n"
            f"–¢–∏–ø: {evidence.type}\n"
            f"–í–∞–∂–Ω–æ—Å—Ç—å: {'‚≠ê' * evidence.importance}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await query.message.edit_text(
            evidence_text,
            reply_markup=await InvestigationKeyboards.create_evidence_keyboard(
                evidence
            ),
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —É–ª–∏–∫–∏: {e}")
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ª–∏–∫—É")


async def handle_suspect_callback(query: Any, suspect_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ"""
    try:
        suspect = await InvestigationRepository.get_suspect(suspect_id)
        if not suspect:
            await query.message.edit_text("‚ùå –ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        suspect_text = (
            f"üë§ *–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–π:* {suspect.name}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {suspect.description}\n"
            f"–ê–ª–∏–±–∏: {suspect.alibi}\n"
            f"–ú–æ—Ç–∏–≤—ã: {', '.join(suspect.motives)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await query.message.edit_text(
            suspect_text,
            reply_markup=await InvestigationKeyboards.create_interrogation_keyboard(
                suspect
            ),
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ: {e}")
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ")


async def handle_location_callback(query: Any, location_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        location = await InvestigationRepository.get_location(location_id)
        if not location:
            await query.message.edit_text("‚ùå –õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        location_text = (
            f"üìç *–õ–æ–∫–∞—Ü–∏—è:* {location.name}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {location.description}\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: {', '.join(location.available_actions)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await query.message.edit_text(
            location_text,
            reply_markup=await InvestigationKeyboards.create_location_keyboard(
                [location]
            ),
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")


async def handle_skill_callback(query: Any, skill_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞"""
    try:
        user_id = query.from_user.id
        user = await UserRepository.get_user(user_id)
        if not user:
            await query.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        skill = user.get_skill(skill_id)
        if not skill:
            await query.message.edit_text("‚ùå –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        skill_text = (
            f"‚ú® *–ù–∞–≤—ã–∫:* {skill.name}\n\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {skill.level}\n"
            f"–û–ø—ã—Ç: {skill.experience}/{skill.next_level_exp}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {skill.description}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await query.message.edit_text(
            skill_text,
            reply_markup=await create_profile_keyboard(),
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–∞: {e}")
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–≤—ã–∫")


async def handle_achievement_callback(query: Any, achievement_id: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    try:
        user_id = query.from_user.id
        user = await UserRepository.get_user(user_id)
        if not user:
            await query.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        achievement = user.get_achievement(achievement_id)
        if not achievement:
            await query.message.edit_text("‚ùå –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        achievement_text = (
            f"üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:* {achievement.title}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {achievement.description}\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {achievement.progress}/{achievement.required}\n"
            f"–ù–∞–≥—Ä–∞–¥–∞: {achievement.reward}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await query.message.edit_text(
            achievement_text,
            reply_markup=await create_profile_keyboard(),
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {e}")
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")
