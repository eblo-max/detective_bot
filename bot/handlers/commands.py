"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""

import logging
from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    Update,
)
from telegram.error import TelegramError
from telegram.ext import (
    Application,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from bot.keyboards.common_keyboard import create_main_menu_keyboard
from bot.keyboards.investigation import InvestigationKeyboards
from bot.keyboards.profile_keyboard import create_profile_keyboard
from bot.utils.formatters import format_message, format_profile
from bot.core.config import config
from bot.database.repositories.case_repository import CaseRepository
from bot.database.repositories.investigation_repository import InvestigationRepository
from bot.database.repositories.news_repository import NewsRepository
from bot.database.repositories.user_repository import UserRepository
from game.player.achievements import check_achievements
from services.claude_service.claude_service import ClaudeService
from bot.database.db import get_db
from game.player.skills import SkillType
from game.investigation.case import Case, CaseStatus

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ANALYZING, CONFIRMING = range(2)
(CHOOSING_CASE, ANALYZING_TEXT) = range(2)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
investigation_keyboards = InvestigationKeyboards()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
async def get_repositories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ —Å —Å–µ—Å—Å–∏–µ–π"""
    session = await get_db()
    return {
        "user_repository": UserRepository(session),
        "case_repository": CaseRepository(session),
        "investigation_repository": InvestigationRepository(session),
        "news_repository": NewsRepository(session),
    }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
user_repository = None
case_repository = None
investigation_repository = None
news_repository = None


async def init_repositories(context=None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    global user_repository, case_repository, investigation_repository, news_repository
    repos = await get_repositories()
    user_repository = repos["user_repository"]
    case_repository = repos["case_repository"]
    investigation_repository = repos["investigation_repository"]
    news_repository = repos["news_repository"]


async def handle_analysis_confirmation(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç

    Returns:
        int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    """
    try:
        user = await user_repository.get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return ConversationHandler.END

        answer = update.message.text.lower()
        if answer == "–¥–∞":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            text_to_analyze = context.user_data.get("text_to_analyze")
            if not text_to_analyze:
                await update.message.reply_text(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return ConversationHandler.END

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            claude_service = ClaudeService()
            analysis_result = await claude_service.analyze_text(text_to_analyze)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await update.message.reply_text(
                f"üìù *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:*\n\n{analysis_result}",
                parse_mode="Markdown",
                reply_markup=await create_main_menu_keyboard(),
            )

            logger.info(f"User {user.id} confirmed text analysis")
            return ConversationHandler.END
        else:
            await update.message.reply_text(
                "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=await create_main_menu_keyboard(),
            )
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in handle_analysis_confirmation: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def handle_evidence_selection(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É–ª–∏–∫–∏.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —É–ª–∏–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        evidence_id = int(update.message.text.split("#")[1])

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repository.get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        active_case = await case_repository.get_active_case(user.id)
        if not active_case:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newcase –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è."
            )
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª–∏–∫—É
        case = Case(active_case, investigation_repository, ClaudeService())
        result = await case.collect_evidence(evidence_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            result["description"],
            reply_markup=InvestigationKeyboards.create_evidence_menu(),
        )

        logger.info(f"User {user.id} analyzed evidence #{evidence_id}")

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —É–ª–∏–∫–∏.")
    except Exception as e:
        logger.error(f"Error in handle_evidence_selection: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —É–ª–∏–∫–∏.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π.
    """
    try:
        user = update.effective_user
        user_repository = context.bot_data.get("user_repository")

        if not user_repository:
            logger.error("user_repository –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db_user = await user_repository.get_user_by_telegram_id(user.id)
        if not db_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db_user = await user_repository.create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            logger.info(f"Created new user: {db_user.id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç-–¥–µ—Ç–µ–∫—Ç–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ –¥–µ–ª–∞. "
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
        )
        await update.message.reply_text(
            welcome_text,
            reply_markup=await create_main_menu_keyboard(),
        )

        logger.info(f"User {db_user.id} started the bot")

    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º.
    """
    try:
        help_text = (
            "üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è\n"
            "/cases - –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π\n"
            "/newcase - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n"
            "/news - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
            "/analyze [—Ç–µ–∫—Å—Ç] - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newcase"
        )

        await update.message.reply_text(
            help_text,
            parse_mode="Markdown",
            reply_markup=await create_main_menu_keyboard(),
        )

        logger.info(f"User {update.effective_user.id} requested help")

    except Exception as e:
        logger.error(f"Error in help command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ —Å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.
    """
    try:
        user_repository = context.bot_data.get("user_repository")
        if not user_repository:
            logger.error("user_repository –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        user = await user_repository.get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return

        profile_text = await format_profile(user)
        keyboard = await create_profile_keyboard()
        await update.message.reply_text(
            profile_text,
            reply_markup=keyboard,
            parse_mode="Markdown",
        )

        logger.info(f"User {user.id} viewed their profile")

    except Exception as e:
        logger.error(f"Error in profile command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def cases_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cases.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
    """
    try:
        user_repository = context.bot_data.get("user_repository")
        case_repository = context.bot_data.get("case_repository")

        if not user_repository or not case_repository:
            logger.error("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        user = await user_repository.get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        active_cases = await case_repository.get_user_active_cases(user.id)
        available_cases = await case_repository.get_available_cases(user.id)

        cases_text = (
            "üîç *–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π*\n\n"
            f"*–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:* {len(active_cases)}\n"
            f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:* {len(available_cases)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        keyboard = InvestigationKeyboards.create_main_menu()
        await update.message.reply_text(
            cases_text, parse_mode="Markdown", reply_markup=keyboard
        )

        logger.info(f"User {user.id} viewed cases list")

    except Exception as e:
        logger.error(f"Error in cases command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –≤ –∏–≥—Ä–µ.
    """
    try:
        user_repository = context.bot_data.get("user_repository")
        news_repository = context.bot_data.get("news_repository")

        if not user_repository or not news_repository:
            logger.error("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        user = await user_repository.get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return

        latest_news = await news_repository.get_latest_news(limit=5)
        if not latest_news:
            await update.message.reply_text(
                "üì∞ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        news_text = "üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n\n"
        for news in latest_news:
            news_text += f"*{news.title}*\n{news.content}\n\n"

        keyboard = await create_main_menu_keyboard()
        await update.message.reply_text(
            news_text, parse_mode="Markdown", reply_markup=keyboard
        )

        logger.info(f"User {user.id} viewed news")

    except Exception as e:
        logger.error(f"Error in news command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: /analyze –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            )
            return ConversationHandler.END

        user_repository = context.bot_data.get("user_repository")
        claude_service = context.bot_data.get("claude_service")

        if not user_repository or not claude_service:
            logger.error("–°–µ—Ä–≤–∏—Å—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

        user = await user_repository.get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
        if user.psychology_skill < 3:
            await update.message.reply_text(
                "‚ùå –í–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–ü–æ–≤—ã—Å—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
            )
            return ConversationHandler.END

        text = " ".join(context.args)

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç Claude
        analysis = await claude_service.analyze_text(
            text=text,
            context={
                "user_level": user.level,
                "psychology_skill": user.psychology_skill,
            },
        )

        await update.message.reply_text(
            f"üß† *–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:*\n\n{analysis}",
            parse_mode="Markdown",
            reply_markup=await create_main_menu_keyboard(),
        )

        logger.info(f"User {user.id} analyzed text")
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in analyze command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –∫–æ–º–∞–Ω–¥—ã analyze
analyze_conv_handler = ConversationHandler(
    entry_points=[CommandHandler("analyze", analyze_command)],
    states={
        ANALYZING: [
            MessageHandler(filters.Regex(r"^–£–ª–∏–∫–∞ #\d+"), handle_evidence_selection)
        ],
        CONFIRMING: [
            MessageHandler(filters.Regex(r"^(–¥–∞|–Ω–µ—Ç)$"), handle_analysis_confirmation)
        ],
    },
    fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
)


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ —Å –µ–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.
    """
    try:
        user_repository = context.bot_data["user_repository"]
        user = await user_repository.get_user(update.effective_user.id)

        if not user:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ—Ñ–∏–ª—è
        user.update_energy()

        profile_text = await format_profile(user)
        await update.message.reply_text(
            profile_text,
            parse_mode="Markdown",
            reply_markup=await create_profile_keyboard(),
        )

        logger.info(f"User {user.id} viewed their profile")

    except Exception as e:
        logger.error(f"Error in profile command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def cases(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cases.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.
    """
    try:
        user_repository = context.bot_data["user_repository"]
        case_repository = context.bot_data["case_repository"]

        user = await user_repository.get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        active_cases = await case_repository.get_user_active_cases(user.id)
        available_cases = await case_repository.get_available_cases(user.id)

        cases_text = (
            "üîç *–°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π*\n\n"
            f"*–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:* {len(active_cases)}\n"
            f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:* {len(available_cases)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await update.message.reply_text(
            cases_text,
            parse_mode="Markdown",
            reply_markup=await create_investigation_keyboard(),
        )

        logger.info(f"User {user.id} viewed cases list")

    except Exception as e:
        logger.error(f"Error in cases command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def newcase(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newcase.
    –ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.
    """
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.energy < config.ENERGY_COST_NEW_CASE:
            await update.message.reply_text(
                f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {config.ENERGY_COST_NEW_CASE} —ç–Ω–µ—Ä–≥–∏–∏\n"
                f"–£ –≤–∞—Å: {user.energy} —ç–Ω–µ—Ä–≥–∏–∏"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        template = await investigation_repository.get_template_by_level(user.level)
        if not template:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        investigation = await investigation_repository.create_investigation(
            user_id=user.id,
            template_id=template.id,
            title=template.title,
            description=template.description,
            difficulty=template.difficulty,
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_repository.update_user_status(
            user_id=user.id, current_investigation_id=investigation.id
        )

        # –°–ø–∏—Å—ã–≤–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
        await user_repository.update_energy(
            user_id=user.id, energy_change=-config.ENERGY_COST_NEW_CASE
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = await create_investigation_keyboard(
            investigation.current_location.actions
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–µ–ª–∞
        await update.message.reply_text(
            f"üîç –ù–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {investigation.title}\n\n"
            f"{investigation.description}\n\n"
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {investigation.difficulty}\n"
            f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {investigation.current_location.name}",
            reply_markup=keyboard,
        )

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ {investigation.id}"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /news.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    """
    try:
        news_repository = context.bot_data["news_repository"]
        user_repository = context.bot_data["user_repository"]

        user = await user_repository.get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
        latest_news = await news_repository.get_latest_news(limit=5)

        if not latest_news:
            await update.message.reply_text(
                "üì∞ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        news_text = "üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n\n"
        for news in latest_news:
            news_text += f"*{news.title}*\n{news.content}\n\n"

        await update.message.reply_text(
            news_text,
            parse_mode="Markdown",
            reply_markup=await create_main_menu_keyboard(),
        )

        logger.info(f"User {user.id} viewed news")

    except Exception as e:
        logger.error(f"Error in news command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def analyze(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze.
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    try:
        if not context.args:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: /analyze –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
            )
            return ConversationHandler.END

        user_repository = context.bot_data["user_repository"]
        claude_service = context.bot_data["claude_service"]

        user = await user_repository.get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return ConversationHandler.END

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
        if user.psychology_skill < 3:
            await update.message.reply_text(
                "‚ùå –í–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–ü–æ–≤—ã—Å—å—Ç–µ —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
            )
            return ConversationHandler.END

        text = " ".join(context.args)

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç Claude
        analysis = await claude_service.analyze_text(
            text=text,
            context={
                "user_level": user.level,
                "psychology_skill": user.psychology_skill,
            },
        )

        await update.message.reply_text(
            f"üß† *–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:*\n\n{analysis}",
            parse_mode="Markdown",
            reply_markup=await create_main_menu_keyboard(),
        )

        logger.info(f"User {user.id} analyzed text")
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in analyze command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞.\n" "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def format_user_profile(user) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    """
    profile_text = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –¥–µ—Ç–µ–∫—Ç–∏–≤–∞*\n\n"
        f"üÜî ID: `{user.telegram_id}`\n"
        f"üë§ –ò–º—è: {user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {user.stats.level}\n"
        f"‚≠ê –û–ø—ã—Ç: {user.stats.experience}/{user._calculate_required_exp(user.stats.level + 1)}\n"
        f"üí™ –≠–Ω–µ—Ä–≥–∏—è: {user.stats.energy}/{user.stats.max_energy}\n"
        f"üîç –†–µ—à–µ–Ω–Ω—ã—Ö –¥–µ–ª: {user.stats.cases_solved}\n"
        f"‚ú® –ò–¥–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ª: {user.stats.perfect_cases}\n\n"
        f"üéØ –ù–∞–≤—ã–∫–∏:\n"
    )

    for skill_name, skill in user.skills.items():
        profile_text += (
            f"‚Ä¢ {skill_name.title()}: {skill.level} "
            f"({skill.experience}/{user._calculate_required_exp(skill.level + 1)})\n"
        )

    return profile_text


async def format_user_achievements(user) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    """
    achievements_text = "üèÜ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n"

    if user.achievements:
        for achievement in user.achievements:
            achievements_text += (
                f"*{achievement.id}*\n"
                f"üìÖ –ü–æ–ª—É—á–µ–Ω–æ: {achievement.unlocked_at.strftime('%d.%m.%Y')}\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {achievement.progress or '100%'}\n"
                f"üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {achievement.required}\n\n"
            )
    else:
        achievements_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n"
        achievements_text += "–í—ã–ø–æ–ª–Ω—è–π—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã!"

    return achievements_text


async def format_user_stats(user) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    stats_text = (
        "üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üéØ –í—Å–µ–≥–æ –æ–ø—ã—Ç–∞: {user.stats.experience}\n"
        f"üìà –£—Ä–æ–≤–µ–Ω—å: {user.stats.level}\n"
        f"üîç –†–µ—à–µ–Ω–æ –¥–µ–ª: {user.stats.cases_solved}\n"
        f"‚ú® –ò–¥–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ª: {user.stats.perfect_cases}\n"
        f"üí™ –≠–Ω–µ—Ä–≥–∏—è: {user.stats.energy}/{user.stats.max_energy}\n"
        f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏: {user.stats.last_energy_update.strftime('%H:%M:%S')}\n"
    )

    return stats_text


async def format_user_skills(user) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–≤—ã–∫–æ–≤
    """
    skills_text = "üéØ *–ù–∞–≤—ã–∫–∏*\n\n"

    for skill_name, skill in user.skills.items():
        skills_text += (
            f"*{skill_name.title()}*\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: {skill.level}\n"
            f"‚≠ê –û–ø—ã—Ç: {skill.experience}/{user._calculate_required_exp(skill.level + 1)}\n"
            f"üéØ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {', '.join(skill.abilities) or '–ù–µ—Ç'}\n\n"
        )

    return skills_text


async def create_back_to_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    """
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data="back_to_profile")]
    ]
    return InlineKeyboardMarkup(keyboard)


async def create_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–æ—Ñ–∏–ª—è.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    """
    keyboard = [
        [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="profile_achievements")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="profile_stats")],
        [InlineKeyboardButton("üéØ –ù–∞–≤—ã–∫–∏", callback_data="profile_skills")],
    ]
    return InlineKeyboardMarkup(keyboard)


async def handle_profile_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    """
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏

    user_repository = UserRepository()
    user = await user_repository.get_user_by_telegram_id(query.from_user.id)

    if not user:
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    callback_data = query.data

    if callback_data == "profile_achievements":
        achievements_text = await format_user_achievements(user)
        keyboard = await create_back_to_profile_keyboard()
        await query.edit_message_text(
            achievements_text, reply_markup=keyboard, parse_mode="Markdown"
        )

    elif callback_data == "profile_stats":
        stats_text = await format_user_stats(user)
        keyboard = await create_back_to_profile_keyboard()
        await query.edit_message_text(
            stats_text, reply_markup=keyboard, parse_mode="Markdown"
        )

    elif callback_data == "profile_skills":
        skills_text = await format_user_skills(user)
        keyboard = await create_back_to_profile_keyboard()
        await query.edit_message_text(
            skills_text, reply_markup=keyboard, parse_mode="Markdown"
        )

    elif callback_data == "back_to_profile":
        profile_text = await format_user_profile(user)
        keyboard = await create_profile_keyboard()
        await query.edit_message_text(
            profile_text, reply_markup=keyboard, parse_mode="Markdown"
        )

    logger.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç {callback_data} –≤ –ø—Ä–æ—Ñ–∏–ª–µ"
    )


async def format_case_description(case) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        case: –û–±—ä–µ–∫—Ç –¥–µ–ª–∞

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–∞
    """
    return (
        f"üîç *{case.title}*\n"
        f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {case.difficulty}\n"
        f"üìÖ –ù–∞—á–∞—Ç–æ: {case.created_at.strftime('%d.%m.%Y')}\n"
        f"üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å: {case.progress}%\n\n"
    )


async def format_news() -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
    """
    news_text = "üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:*\n\n"
    latest_news = await news_repository.get_latest_news(limit=5)

    if not latest_news:
        return "üì∞ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    for news in latest_news:
        news_text += f"*{news.title}*\n{news.content}\n\n"

    return news_text


async def format_evidence_analysis(evidence) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —É–ª–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        evidence: –û–±—ä–µ–∫—Ç —É–ª–∏–∫–∏

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —É–ª–∏–∫–∏
    """
    return (
        f"üîç *–ê–Ω–∞–ª–∏–∑ —É–ª–∏–∫–∏ #{evidence.id}*\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {evidence.description}\n"
        f"üìä –¢–∏–ø: {evidence.type}\n"
        f"üéØ –í–∞–∂–Ω–æ—Å—Ç—å: {evidence.importance}\n"
        f"üìÖ –ù–∞–π–¥–µ–Ω–æ: {evidence.found_at.strftime('%d.%m.%Y')}\n\n"
        f"–ê–Ω–∞–ª–∏–∑:\n{evidence.analysis or '–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω'}"
    )


async def create_investigation_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    return investigation_keyboards.create_main_menu()


def register_command_handlers(application: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    application.job_queue.run_once(init_repositories, 0)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CommandHandler("cases", cases_command))
    application.add_handler(CommandHandler("news", news_command))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —Å ConversationHandler
    application.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler("newcase", newcase)],
            states={CHOOSING_CASE: [CallbackQueryHandler(newcase, pattern="^case_")]},
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        )
    )

    application.add_handler(
        ConversationHandler(
            entry_points=[CommandHandler("analyze", analyze)],
            states={
                ANALYZING_TEXT: [CallbackQueryHandler(analyze, pattern="^analyze_")]
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
        )
    )

    logger.info("Command handlers registered successfully")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç
    """
    try:
        user = await user_repository.get_user_by_telegram_id(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
            )
            return

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await update.message.reply_text(
            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )

    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
