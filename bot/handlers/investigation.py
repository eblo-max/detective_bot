"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π."""

import logging
from datetime import datetime
from enum import Enum, auto
from typing import Any, Dict, List, Optional, Union

from telegram import InlineKeyboardMarkup, Update
from telegram.error import TelegramError
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    Application,
)

from bot.handlers.states import States
from bot.keyboards.investigation import InvestigationKeyboards
from bot.keyboards.common_keyboard import create_main_menu_keyboard
from bot.utils.formatters import format_investigation_response
from bot.core.config import config
from bot.database.models.case import Case
from bot.database.models.investigation import Investigation
from bot.database.models.user import User
from bot.database.repositories.case_repository import CaseRepository
from bot.database.repositories.investigation_repository import InvestigationRepository
from bot.database.repositories.user_repository import UserRepository
from game.investigation.case import Case
from game.player.energy import EnergyManager
from game.player.skills import SkillType
from services.claude_service.claude_service import ClaudeService
from bot.database.db import get_db

logger = logging.getLogger(__name__)


class ActionType(Enum):
    """–¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏"""

    EXAMINE = "examine"
    INTERROGATE = "interrogate"
    ANALYZE = "analyze"
    MAKE_DEDUCTION = "deduction"
    BACK = "back"


class ButtonData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""

    def __init__(self, action: str, target_id: Optional[str] = None):
        self.action = action
        self.target_id = target_id

    def __str__(self) -> str:
        if self.target_id:
            return f"{self.action}_{self.target_id}"
        return self.action


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
case_repository = None
user_repository = None
investigation_repository = None
energy_manager = EnergyManager()
claude_service = ClaudeService()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
investigation_keyboards = InvestigationKeyboards()


async def init_repositories():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤"""
    global case_repository, user_repository, investigation_repository
    session = await get_db()
    case_repository = CaseRepository(session)
    user_repository = UserRepository(session)
    investigation_repository = InvestigationRepository(session)


async def start_investigation(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    try:
        if case_repository is None or user_repository is None:
            await init_repositories()

        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –∏–≥—Ä–æ–∫–∞
        user = await user_repository.get_user_by_telegram_id(user_id)
        if not user or user.energy.current < 10:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n"
                "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —ç–Ω–µ—Ä–≥–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è."
            )
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        available_cases = await case_repository.get_available_cases(user_id)
        if not available_cases:
            await update.message.reply_text(
                "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏
        keyboard = InvestigationKeyboards.create_main_menu()
        await update.message.reply_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞:", reply_markup=keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data["state"] = States.MAIN_MENU
        return States.MAIN_MENU

    except Exception as e:
        logger.error(f"Error starting investigation: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END


async def handle_main_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–µ–Ω—é —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()

        case_id = context.user_data.get("case_id")
        if not case_id:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ConversationHandler.END

        action_type = query.data.split("_")[0]

        if action_type == "examine":
            await query.message.edit_text(
                "üîç –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞:",
                reply_markup=await create_investigation_actions_keyboard(
                    await get_examineable_objects(case_id)
                ),
            )
            return States.EXAMINING_SCENE

        elif action_type == "interrogate":
            await query.message.edit_text(
                "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –¥–æ–ø—Ä–æ—Å–∞:",
                reply_markup=await create_investigation_actions_keyboard(
                    await get_available_witnesses(case_id)
                ),
            )
            return States.INTERVIEWING_WITNESS

        elif action_type == "analyze":
            await query.message.edit_text(
                "üî¨ –í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                reply_markup=await create_investigation_actions_keyboard(
                    await get_available_evidence(case_id)
                ),
            )
            return States.ANALYZING_EVIDENCE

        elif action_type == "deduction":
            await query.message.edit_text(
                "üß† –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
                reply_markup=await create_investigation_actions_keyboard(
                    await get_available_theories(case_id)
                ),
            )
            return States.MAKING_DEDUCTION

        elif action_type == "skill":
            await query.message.edit_text(
                "‚ú® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
                reply_markup=await create_investigation_actions_keyboard(
                    await get_available_skills(update.effective_user.id)
                ),
            )
            return States.ANALYZING

        elif action_type == "decide":
            await query.message.edit_text(
                "‚öñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ:",
                reply_markup=await create_decision_keyboard(
                    await get_available_decisions(case_id)
                ),
            )
            return States.FINAL_DECISION

        else:
            await query.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
        await update.callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return ConversationHandler.END


async def select_case(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    try:
        query = update.callback_query
        await query.answer()

        case_id = query.data.split("_")[1]
        context.user_data["case_id"] = case_id

        case = await case_repository.get_case(case_id)
        if not case:
            await query.message.edit_text("‚ùå –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ConversationHandler.END

        await query.message.edit_text(
            f"üîç *{case.title}*\n\n{case.description}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=await create_investigation_actions_keyboard([case]),
        )

        return States.MAIN_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        return ConversationHandler.END


async def handle_examination_action(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –æ—Å–º–æ—Ç—Ä–∞"""
    try:
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ —Å –∫–Ω–æ–ø–∫–∏

        case_id = context.user_data.get("case_id")
        if not case_id:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å–º–æ—Ç—Ä–∞
        result = await claude_service.generate_next_step(
            case_id=case_id, action_type="examine", target_id=query.data.split("_")[1]
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await query.message.edit_text(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å–º–æ—Ç—Ä–∞:\n\n{result}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await create_investigation_actions_keyboard(
                [await case_repository.get_case(case_id)]
            ),
        )

        return States.MAIN_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ")
        return ConversationHandler.END


async def handle_interrogation_action(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø—Ä–æ—Å–∞"""
    try:
        query = update.callback_query
        await query.answer()

        case_id = context.user_data.get("case_id")
        if not case_id:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ConversationHandler.END

        result = await claude_service.generate_next_step(
            case_id=case_id,
            action_type="interrogate",
            target_id=query.data.split("_")[1],
        )

        await query.message.edit_text(
            f"üë• –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ø—Ä–æ—Å–∞:\n\n{result}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await create_investigation_actions_keyboard(
                [await case_repository.get_case(case_id)]
            ),
        )

        return States.MAIN_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø—Ä–æ—Å–µ: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–ø—Ä–æ—Å–µ")
        return ConversationHandler.END


async def handle_analysis_action(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–ª–∏–∫"""
    try:
        query = update.callback_query
        await query.answer()

        case_id = context.user_data.get("case_id")
        if not case_id:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ConversationHandler.END

        result = await claude_service.generate_next_step(
            case_id=case_id, action_type="analyze", target_id=query.data.split("_")[1]
        )

        await query.message.edit_text(
            f"üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n\n{result}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await create_investigation_actions_keyboard(
                [await case_repository.get_case(case_id)]
            ),
        )

        return States.MAIN_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ")
        return ConversationHandler.END


async def handle_deduction_action(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–≤–∏–∂–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏"""
    try:
        query = update.callback_query
        await query.answer()

        case_id = context.user_data.get("case_id")
        if not case_id:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ConversationHandler.END

        result = await claude_service.generate_next_step(
            case_id=case_id, action_type="deduction", target_id=query.data.split("_")[1]
        )

        await query.message.edit_text(
            f"üß† –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:\n\n{result}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await create_investigation_actions_keyboard(
                [await case_repository.get_case(case_id)]
            ),
        )

        return States.MAIN_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–≤–∏–∂–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–≤–∏–∂–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏")
        return ConversationHandler.END


async def handle_skill_action(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞"""
    try:
        query = update.callback_query
        await query.answer()

        case_id = context.user_data.get("case_id")
        if not case_id:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ConversationHandler.END

        skill_id = query.data.split("_")[1]
        result = await claude_service.generate_next_step(
            case_id=case_id, action_type="skill", target_id=skill_id
        )

        await query.message.edit_text(
            f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞–≤—ã–∫–∞:\n\n{result}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=await create_investigation_actions_keyboard(
                [await case_repository.get_case(case_id)]
            ),
        )

        return States.MAIN_MENU

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞")
        return ConversationHandler.END


async def handle_final_decision(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø–æ –¥–µ–ª—É"""
    try:
        query = update.callback_query
        await query.answer()

        case_id = context.user_data.get("case_id")
        if not case_id:
            await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return ConversationHandler.END

        decision_id = query.data.split("_")[1]
        result = await claude_service.generate_next_step(
            case_id=case_id, action_type="decision", target_id=decision_id
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        await case_repository.close_case(case_id, decision_id)

        await query.message.edit_text(
            f"üé≠ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n\n{result}\n\n–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
            reply_markup=None,
        )

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
        await query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"
        )
        return ConversationHandler.END


async def cancel_investigation(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    try:
        query = update.callback_query
        if query:
            await query.answer()
            await query.message.edit_text("‚ùå –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        else:
            await update.message.reply_text("‚ùå –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        return ConversationHandler.END


# –°–æ–∑–¥–∞–µ–º ConversationHandler
investigation_handler = ConversationHandler(
    entry_points=[CommandHandler("investigate", start_investigation)],
    states={
        States.MAIN_MENU: [
            CallbackQueryHandler(handle_main_action, pattern="^action_"),
            CallbackQueryHandler(select_case, pattern="^case_"),
        ],
        States.EXAMINING_SCENE: [
            CallbackQueryHandler(handle_examination_action, pattern="^action_")
        ],
        States.INTERVIEWING_WITNESS: [
            CallbackQueryHandler(handle_interrogation_action, pattern="^action_")
        ],
        States.ANALYZING_EVIDENCE: [
            CallbackQueryHandler(handle_analysis_action, pattern="^action_")
        ],
        States.MAKING_DEDUCTION: [
            CallbackQueryHandler(handle_deduction_action, pattern="^action_")
        ],
        States.ANALYZING: [
            CallbackQueryHandler(handle_skill_action, pattern="^skill_")
        ],
        States.FINAL_DECISION: [
            CallbackQueryHandler(handle_final_decision, pattern="^decision_")
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel_investigation)],
    per_message=False,
)


def register_investigation_handlers(application: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    application.job_queue.run_once(init_repositories, 0)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
    application.add_handler(investigation_handler)

    logger.info("Investigation handlers registered successfully")


async def handle_examination(
    update: Update, context: ContextTypes.DEFAULT_TYPE, user_repository: UserRepository
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–º–æ—Ç—Ä–∞ –º–µ—Å—Ç–∞"""
    try:
        state_data = context.user_data
        user = await user_repository.get_user(update.effective_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞
        examineable_objects = await get_examineable_objects(state_data["case_id"])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = create_investigation_actions_keyboard(examineable_objects)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.message.edit_text(
            "üîç –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await context.bot.set_state(
            update.effective_user.id, state=States.EXAMINING_SCENE
        )

    except Exception as e:
        logger.error(f"Error handling examination: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ")


async def create_investigation_actions_keyboard(
    items: List[Dict[str, Any]],
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"""
    return investigation_keyboards.create_action_keyboard(items)


async def get_examineable_objects(case_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞"""
    if case_repository is None:
        await init_repositories()
    return await case_repository.get_examineable_objects(case_id)


async def get_available_witnesses(case_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–≤–∏–¥–µ—Ç–µ–ª–µ–π"""
    if case_repository is None:
        await init_repositories()
    return await case_repository.get_available_witnesses(case_id)


async def get_available_evidence(case_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ª–∏–∫"""
    if case_repository is None:
        await init_repositories()
    return await case_repository.get_available_evidence(case_id)


async def get_available_theories(case_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–æ—Ä–∏–π"""
    if case_repository is None:
        await init_repositories()
    return await case_repository.get_available_theories(case_id)


async def get_available_skills(user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"""
    if user_repository is None:
        await init_repositories()
    user = await user_repository.get_user_by_telegram_id(user_id)
    return user.get_available_skills() if user else []


async def create_decision_keyboard(
    decisions: List[Dict[str, Any]],
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"""
    return investigation_keyboards.create_decision_keyboard(decisions)


async def get_available_decisions(case_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
    if case_repository is None:
        await init_repositories()
    return await case_repository.get_available_decisions(case_id)
