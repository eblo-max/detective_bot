"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–æ–≤–æ—Å—Ç–µ–π"""

import logging
from typing import List, Any

from telegram import Update
from telegram.ext import ContextTypes, Application, CommandHandler, ConversationHandler

from bot.utils.formatters import format_news
from bot.database.repositories.news_repository import NewsRepository
from bot.handlers.states import States
from bot.database.db import SessionLocal
from bot.keyboards.news_keyboard import create_news_keyboard

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
news_repository = None


async def init_repository(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    session = SessionLocal()
    context.bot_data["news_repository"] = NewsRepository(session)


async def read_news(
    query: Any, context: ContextTypes.DEFAULT_TYPE, news_id: str
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏."""
    try:
        if not news_id:
            await query.message.edit_text("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        news = await news_repository.get_news_by_id(news_id)
        if not news:
            await query.message.edit_text("‚ùå –ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        await query.message.edit_text(
            f"üì∞ *{news.title}*\n\n{news.content}",
            parse_mode="Markdown",
            reply_markup=await create_news_keyboard(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏")


async def show_city_map(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É –≥–æ—Ä–æ–¥–∞"""
    try:
        if news_repository is None:
            await init_repository(context)

        map_data = await news_repository.get_city_map()
        if not map_data:
            await update.message.reply_text("–ö–∞—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        description = map_data.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        await update.message.reply_text(
            f"üó∫Ô∏è *–ö–∞—Ä—Ç–∞ –≥–æ—Ä–æ–¥–∞*\n\n{description}",
            parse_mode="Markdown",
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ä—Ç—ã –≥–æ—Ä–æ–¥–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –≥–æ—Ä–æ–¥–∞")


# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
news_handler = ConversationHandler(
    entry_points=[CommandHandler("news", read_news)],
    states={
        States.VIEWING_NEWS: [
            CommandHandler("map", show_city_map),
        ],
    },
    fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
)


def register_news_handlers(application: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    application.job_queue.run_once(init_repository, 0)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
    application.add_handler(news_handler)

    logger.info("News handlers registered successfully")


__all__ = ["read_news", "register_news_handlers"]
