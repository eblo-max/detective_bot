"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø—Ä–æ—Ñ–∏–ª—è"""

import logging
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes, Application, CommandHandler, ConversationHandler

from bot.keyboards.profile_keyboard import create_profile_keyboard
from bot.utils.formatters import format_profile
from bot.database.repositories.user_repository import UserRepository
from bot.handlers.states import States
from bot.database.db import SessionLocal
from telegram.ext import CallbackContext

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
user_repository = None


async def init_repository(context: CallbackContext) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    session = SessionLocal()
    context.bot_data["user_repository"] = UserRepository(session)


async def show_profile(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = update.effective_user
        profile = await context.bot_data["user_repository"].get_user_by_telegram_id(
            user.id
        )

        if not profile:
            await update.message.reply_text(
                "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                reply_markup=await create_profile_keyboard(),
            )
            return

        await update.message.reply_text(
            await format_profile(profile), reply_markup=await create_profile_keyboard()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")


async def show_achievements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if user_repository is None:
            await init_repository()

        user = await user_repository.get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        achievements = await user_repository.get_user_achievements(user.id)
        if not achievements:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")
            return

        achievements_text = "üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
        for achievement in achievements:
            title = achievement.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            description = achievement.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            achievements_text += f"‚Ä¢ {title}\n"
            achievements_text += f"  {description}\n\n"

        await update.message.reply_text(
            achievements_text,
            parse_mode="Markdown",
            reply_markup=create_profile_keyboard(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π")


async def show_skills(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if user_repository is None:
            await init_repository()

        user = await user_repository.get_user(update.effective_user.id)
        if not user:
            await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        skills = await user_repository.get_user_skills(user.id)
        if not skills:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≤—ã–∫–æ–≤")
            return

        skills_text = "üéØ *–í–∞—à–∏ –Ω–∞–≤—ã–∫–∏:*\n\n"
        for skill in skills:
            name = skill.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            level = skill.get("level", 0)
            description = skill.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            skills_text += f"‚Ä¢ {name} (–£—Ä–æ–≤–µ–Ω—å {level})\n"
            skills_text += f"  {description}\n\n"

        await update.message.reply_text(
            skills_text,
            parse_mode="Markdown",
            reply_markup=create_profile_keyboard(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞–≤—ã–∫–æ–≤: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–æ–≤")


async def handle_profile_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    await query.answer()

    if query.data == "profile_skills":
        await show_skills(update, context)
    elif query.data == "profile_achievements":
        await show_achievements(update, context)
    else:
        await show_profile(update, context)


# –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
profile_handler = ConversationHandler(
    entry_points=[CommandHandler("profile", show_profile)],
    states={
        States.VIEWING_PROFILE: [
            CommandHandler("achievements", show_achievements),
            CommandHandler("skills", show_skills),
        ],
    },
    fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)],
)


def register_profile_handlers(application: Application) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

    Args:
        application: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    application.job_queue.run_once(init_repository, 0)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è
    application.add_handler(profile_handler)

    logger.info("Profile handlers registered successfully")
