"""–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""

import logging
from typing import Any

from telegram import Update
from telegram.ext import CallbackContext
from bot.keyboards.case_keyboard import create_case_actions_keyboard
from bot.handlers.investigation import (
    show_investigation_status,
    examine_evidence,
    interrogate_suspect,
    solve_investigation,
)
from bot.handlers.news import read_news

logger = logging.getLogger(__name__)


async def handle_callback(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤.

    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç callback
    """
    try:
        query = update.callback_query
        if not query:
            return

        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = query.data
        if not data:
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if data.startswith("case_"):
            await handle_case_callback(query, context)
        elif data.startswith("investigation_"):
            await handle_investigation_callback(query, context)
        elif data.startswith("news_"):
            await handle_news_callback(query, context)
        else:
            logger.warning(f"Unknown callback type: {data}")

    except Exception as e:
        logger.error(f"Error handling callback: {e}")


async def handle_case_callback(query: Any, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–µ–ª–∞–º–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = query.data
        parts = data.split("_")

        if len(parts) < 2:
            await query.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback-–¥–∞–Ω–Ω—ã—Ö")
            return

        case_id = parts[1]
        case_repository = context.bot_data.get("case_repository")

        if not case_repository:
            await query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–µ–ª –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            )
            return

        case = await case_repository.get_case_by_id(case_id)
        if not case:
            await query.message.edit_text("‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–ª–µ
        case_text = (
            f"üìÅ *–î–µ–ª–æ ‚Ññ{case.id}*\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {case.title}\n"
            f"–°—Ç–∞—Ç—É—Å: {case.status}\n"
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {'‚≠ê' * case.difficulty}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {case.description}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ª–µ
        await query.message.edit_text(
            case_text,
            parse_mode="Markdown",
            reply_markup=await create_case_actions_keyboard(case),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –¥–µ–ª–∞: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_investigation_callback(query: Any, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = query.data
        parts = data.split("_")

        if len(parts) < 2:
            await query.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback-–¥–∞–Ω–Ω—ã—Ö")
            return

        action = parts[1]
        investigation_repository = context.bot_data.get("investigation_repository")

        if not investigation_repository:
            await query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
            )
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        if action == "start":
            # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            investigation = await investigation_repository.create_investigation(
                user_id=query.from_user.id, case_id=parts[2] if len(parts) > 2 else None
            )
            await show_investigation_status(query, investigation)

        elif action == "examine":
            # –û—Å–º–æ—Ç—Ä –º–µ—Å—Ç–∞/—É–ª–∏–∫–∏
            evidence_id = parts[2] if len(parts) > 2 else None
            await examine_evidence(query, context, evidence_id)

        elif action == "interrogate":
            # –î–æ–ø—Ä–æ—Å –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ
            suspect_id = parts[2] if len(parts) > 2 else None
            await interrogate_suspect(query, context, suspect_id)

        elif action == "solve":
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            investigation_id = parts[2] if len(parts) > 2 else None
            await solve_investigation(query, context, investigation_id)

        else:
            await query.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


async def handle_news_callback(query: Any, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data = query.data
        parts = data.split("_")

        if len(parts) < 2:
            await query.message.edit_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback-–¥–∞–Ω–Ω—ã—Ö")
            return

        news_id = parts[1]
        await read_news(query, context, news_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ callback: {e}")
        await query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
